{"version":3,"sources":["components/Table.jsx","components/Info.jsx","components/Button.jsx","App.js","serviceWorker.js","store/reducerLogic.js","store/Store.jsx","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleMove","bind","assertThisInitialized","win","index","_this$props","whoMove","move","indexX","indexO","cells","addIndexX","addIndexO","info","moveInfo","count","copyCells","toConsumableArray","copyIndexX","copyIndexO","element","infoAboutMove","concat","x","o","_arr","_i","length","every","winner","includes","_this2","react_default","a","createElement","className","map","item","key","data-index","onClick","React","Component","connect","state","dispatch","type","payload","arr","_ref","Button","handleClear","restart","App","store","es","components_Info","components_Table","components_Button","Boolean","window","location","hostname","match","restartGame","Array","fill","game","rootReducer","arguments","undefined","action","objectSpread","createStore","configureStore","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.03fa380b.chunk.js","sourcesContent":["import React from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nclass Table extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.handleMove = this.handleMove.bind(this)\r\n    this.win = this.win.bind(this);\r\n  }\r\n\r\n  handleMove(index) {\r\n    const { whoMove, move, indexX, indexO, cells,\r\n      addIndexX, addIndexO, info, moveInfo, count } = this.props;\r\n\r\n    let copyCells = [...cells];\r\n    let copyIndexX = [...indexX];\r\n    let copyIndexO = [...indexO];\r\n\r\n    if (copyCells[index] !== null\r\n      || moveInfo === 'Победил: X'\r\n      || moveInfo === 'Победил: O'\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    let element = ''\r\n    let infoAboutMove = ''\r\n\r\n    if (move === 'X') {\r\n      copyCells[index] = 'X'\r\n      element = 'O'\r\n      copyIndexX = [...copyIndexX, index]\r\n      infoAboutMove = 'Ход: О'\r\n      addIndexX(copyIndexX)\r\n\r\n    } else if (move === 'O') {\r\n      copyCells[index] = 'O'\r\n      element = 'X'\r\n      copyIndexO = [...copyIndexO, index]\r\n      infoAboutMove = 'Ход: X'\r\n      addIndexO(copyIndexO)\r\n    }\r\n\r\n    let counter = count + 1\r\n\r\n    whoMove(copyCells, element, counter)\r\n    info(infoAboutMove)\r\n    this.win(copyIndexX, copyIndexO)\r\n  }\r\n\r\n  win(x, o) {\r\n    const winComination = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6]\r\n    ]\r\n\r\n    for (let win of winComination) {\r\n      const { info } = this.props\r\n      if (win.every(winner => x.includes(winner))) {\r\n        info('Победил: X')\r\n        return;\r\n\r\n      } else if (win.every(winner => o.includes(winner))) {\r\n        info('Победил: O')\r\n\r\n      } else if (this.props.count === 8) {\r\n        info('Ничья')\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { cells } = this.props\r\n    return (\r\n      <div className=\"table\">\r\n        {cells.map((item, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"cells\"\r\n            data-index={index}\r\n            onClick={() => this.handleMove(index)}\r\n          >\r\n            {item}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  cells: state.cells,\r\n  move: state.move,\r\n  indexX: state.indexX,\r\n  indexO: state.indexO,\r\n  moveInfo: state.info,\r\n  count: state.count,\r\n})\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    whoMove(cells, move, count, info) {\r\n      dispatch({ type: 'MOVE', payload: { cells, move, count, info } })\r\n    },\r\n    info(info) {\r\n      dispatch({ type: 'INFO', payload: info })\r\n    },\r\n    addIndexX(arr) {\r\n      dispatch({ type: 'ADD_INDEX_X', payload: arr })\r\n    },\r\n    addIndexO(arr) {\r\n      dispatch({ type: 'ADD_INDEX_O', payload: arr })\r\n    }\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Table)","import React from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nconst Info = ({ info }) => <h1 className=\"info\">{info}</h1>\r\n\r\n\r\nconst mapStateToProps = state => ({\r\n  info: state.info,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Info)","import React from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nclass Button extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.handleClear = this.handleClear.bind(this)\r\n  }\r\n\r\n  handleClear() {\r\n    this.props.restart()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"button\"\r\n        onClick={this.handleClear}\r\n      >Restart Game</button>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    restart() {\r\n      dispatch({ type: 'RESTART_GAME' })\r\n    },\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Button)","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport Table from './components/Table'\r\nimport Info from './components/Info'\r\nimport Button from './components/Button'\r\n\r\nconst App = ({ store }) => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"game\">\r\n        <Info />\r\n        <Table />\r\n        <Button />\r\n      </div>\r\n    </Provider>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const restartGame = {\r\n  cells: Array(9).fill(null),\r\n  move: 'X',\r\n  info: 'Ход: X',\r\n  count: 0,\r\n  indexX: [],\r\n  indexO: [],\r\n}\r\n\r\n\r\n","import { createStore } from 'redux'\r\nimport { restartGame } from './reducerLogic'\r\n\r\nconst game = {\r\n  cells: Array(9).fill(null),\r\n  move: 'X',\r\n  info: 'Ход: X',\r\n  count: 0,\r\n  indexX: [],\r\n  indexO: [],\r\n}\r\n\r\nconst rootReducer = (state = game, action) => {\r\n  switch (action.type) {\r\n    case 'MOVE':\r\n      return {\r\n        ...state,\r\n        move: action.payload.move,\r\n        cells: action.payload.cells,\r\n        count: action.payload.count,\r\n        info: action.payload.info\r\n      }\r\n    case 'INFO':\r\n      return {\r\n        ...state,\r\n        info: action.payload,\r\n      }\r\n\r\n    case 'ADD_INDEX_X':\r\n      return {\r\n        ...state,\r\n        indexX: action.payload\r\n      }\r\n\r\n    case 'ADD_INDEX_O':\r\n      return {\r\n        ...state,\r\n        indexO: action.payload\r\n      }\r\n\r\n    case 'RESTART_GAME':\r\n      return state = restartGame\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst configureStore = () => createStore(rootReducer)\r\n\r\nexport default configureStore;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './store/Store'\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(<App store={store} />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}