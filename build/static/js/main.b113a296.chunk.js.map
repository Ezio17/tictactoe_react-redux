{"version":3,"sources":["components/Table.jsx","components/Info.jsx","components/Button.jsx","App.js","serviceWorker.js","store/reducerLogic.js","store/Store.js","index.js"],"names":["Table","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","xIndex","oIndex","handleMove","bind","assertThisInitialized","win","clearIndex","index","_this$props","whoMove","cells","winner","count","copyCells","toConsumableArray","push","x","o","isWinner","console","log","_arr","_i","length","every","includes","_this2","react_default","a","createElement","className","map","item","key","data-index","onClick","React","Component","connect","_ref","dispatch","type","payload","result","arguments","undefined","state","gameResult","concat","Button","handleClear","restart","App","store","es","components_Info","components_Table","components_Button","Boolean","window","location","hostname","match","restartGame","Array","fill","game","rootReducer","action","_action$payload","objectSpread","createStore","configureStore","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b113a296.chunk.js","sourcesContent":["import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nclass Table extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.xIndex = [];\r\n    this.oIndex = [];\r\n\r\n    this.handleMove = this.handleMove.bind(this);\r\n    this.win = this.win.bind(this);\r\n    this.clearIndex = this.clearIndex.bind(this);\r\n  }\r\n\r\n  handleMove(index) {\r\n    const { whoMove, cells, winner, count } = this.props;\r\n\r\n    let copyCells = [...cells];\r\n\r\n    if (copyCells[index] !== null || winner) {\r\n      return;\r\n    }\r\n\r\n    if (count % 2 === 0) {\r\n      copyCells[index] = 'X';\r\n      this.xIndex.push(index);\r\n    } else if (count % 2 === 1) {\r\n      copyCells[index] = 'O';\r\n      this.oIndex.push(index);\r\n    }\r\n\r\n    let counter = count + 1;\r\n\r\n    whoMove(copyCells, counter);\r\n    this.win(this.xIndex, this.oIndex);\r\n  }\r\n\r\n  win(x, o) {\r\n    const winComination = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n\r\n    const { isWinner } = this.props;\r\n    console.log(this.props.count);\r\n\r\n    for (let win of winComination) {\r\n      if (win.every(winner => x.includes(winner))) {\r\n        isWinner();\r\n        this.clearIndex();\r\n        return;\r\n      } else if (win.every(winner => o.includes(winner))) {\r\n        isWinner();\r\n        this.clearIndex();\r\n      } else if (this.props.count === 8 && !win.every(winner => x.includes(winner))) {\r\n        isWinner('draw');\r\n        this.clearIndex();\r\n      }\r\n    }\r\n  }\r\n\r\n  clearIndex() {\r\n    this.xIndex = [];\r\n    this.oIndex = [];\r\n  }\r\n\r\n  render() {\r\n    const { cells } = this.props;\r\n    return (\r\n      <div className=\"table\">\r\n        {cells.map((item, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"cells\"\r\n            data-index={index}\r\n            onClick={() => this.handleMove(index)}\r\n          >\r\n            {item}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = ({ cells, count, isWinner }) => ({ cells, count, winner: isWinner });\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    whoMove(cells, count) {\r\n      dispatch({ type: 'MOVE', payload: { cells, count } });\r\n    },\r\n    isWinner(result = true) {\r\n      dispatch({ type: 'WINNER', payload: result });\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(Table);\r\n","import React from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nconst Info = ({ count, winner }) => {\r\n  let gameResult = ''\r\n  if (winner === 'draw') {\r\n    gameResult = 'Ничья'\r\n\r\n  } else if (winner) {\r\n    gameResult = `Победил: ${count % 2 === 0 ? 'O' : 'X'}`\r\n\r\n  }\r\n  else if (!winner) {\r\n    gameResult = `Ход: ${count % 2 === 0 ? 'X' : 'O'}`\r\n  }\r\n\r\n  return <h1 className=\"info\">{gameResult}</h1>\r\n}\r\n\r\nconst mapStateToProps = state => ({\r\n  count: state.count,\r\n  winner: state.isWinner\r\n})\r\n\r\nexport default connect(mapStateToProps)(Info)","import React from 'react'\r\nimport { connect } from 'react-redux';\r\n\r\nclass Button extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.handleClear = this.handleClear.bind(this)\r\n  }\r\n\r\n  handleClear() {\r\n    this.props.restart()\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"button\"\r\n        onClick={this.handleClear}\r\n      >Restart Game</button>\r\n    )\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    restart() {\r\n      dispatch({ type: 'RESTART_GAME' })\r\n    },\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(Button)","import React from 'react';\r\nimport './App.css';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport Table from './components/Table'\r\nimport Info from './components/Info'\r\nimport Button from './components/Button'\r\n\r\nconst App = ({ store }) => {\r\n  return (\r\n    <Provider store={store}>\r\n      <div className=\"game\">\r\n        <Info />\r\n        <Table />\r\n        <Button />\r\n      </div>\r\n    </Provider>\r\n  );\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","export const restartGame = {\r\n  cells: Array(9).fill(null),\r\n  count: 0,\r\n  isWinner: false\r\n}\r\n\r\n\r\n\r\n","import { createStore } from 'redux'\r\nimport { restartGame } from './reducerLogic'\r\n\r\nconst game = {\r\n  cells: Array(9).fill(null),\r\n  count: 0,\r\n  isWinner: false,\r\n}\r\n\r\nconst rootReducer = (state = game, action) => {\r\n  switch (action.type) {\r\n    case 'MOVE':\r\n      const { cells, count } = action.payload;\r\n      return {\r\n        ...state,\r\n        cells,\r\n        count,\r\n      }\r\n\r\n    case 'RESTART_GAME':\r\n      return state = restartGame\r\n\r\n    case 'WINNER':\r\n      return {\r\n        ...state,\r\n        isWinner: action.payload\r\n      }\r\n\r\n    default:\r\n      return state\r\n  }\r\n}\r\n\r\nconst configureStore = () => createStore(rootReducer)\r\n\r\nexport default configureStore;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport configureStore from './store/Store'\r\n\r\nconst store = configureStore();\r\n\r\nReactDOM.render(<App store={store} />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}